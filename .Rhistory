var_labels <- c(
reproduction          = "Reproduction",
time2_reproduction    = "Minutes to reproduction",
minor_errors          = "Number of minor errors",
time2_first_minor     = "Minutes to first minor error",
major_errors          = "Number of major errors",
time2_first_major     = "Minutes to first major error",
one_good_robustness   = "At least one good robustness check",
two_good_robustness   = "At least two good robustness checks",
ran_one_robustness    = "Ran at least one good robustness check",
ran_two_robustness    = "Ran at least two good robustness checks"
)
# ========== Function to produce table ==============
make_latex_table <- function(df, suffix = "", caption_add = "", label_add = "") {
# Means & SDs
stats_df <- df %>%
group_by(branch) %>%
summarise(across(all_of(varlist),
list(mean = ~mean(.x, na.rm = TRUE),
sd   = ~sd(.x,   na.rm = TRUE)),
.names = "{col}_{fn}"),
.groups = "drop")
long_df <- stats_df %>%
pivot_longer(
cols         = -branch,
names_to     = c("variable", "stat"),
names_pattern = "^(.*)_(mean|sd)$"
) %>%
mutate(
variable = dplyr::recode(variable, !!!var_labels)
)
wide_stats <- long_df %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(mean_sd = ifelse(
variable %in% c("Minutes to reproduction",
"Minutes to first minor error",
"Minutes to first major error"),
paste0(sprintf("%.1f", mean), "<br>(", sprintf("%.1f", sd), ")"),
paste0(sprintf("%.3f", mean), "<br>(", sprintf("%.3f", sd), ")")
)) %>%
dplyr::select(variable, branch, mean_sd) %>%
pivot_wider(names_from = branch, values_from = mean_sd)
# Pair-wise differences & p-values
branches     <- levels(df$branch)
branch_pairs <- combn(branches, 2, simplify = FALSE)
get_diff <- function(var, b1, b2){
d1 <- df %>% filter(branch == b1) %>% pull(!!sym(var))
d2 <- df %>% filter(branch == b2) %>% pull(!!sym(var))
diff <- pval <- NA_real_
if(length(na.omit(d1))>1 && length(na.omit(d2))>1){
tmp  <- tryCatch(t.test(d1,d2,var.equal=TRUE), error=function(e) NULL)
if(!is.null(tmp)){
diff <- mean(d1,na.rm=TRUE)-mean(d2,na.rm=TRUE)
pval <- tmp$p.value
}
}
data.frame(variable   = var_labels[[var]],
comparison = paste(b1,"vs",b2),
diff_mean  = diff,
p_value    = pval,
stringsAsFactors=FALSE)
}
diff_df <- do.call(rbind,
lapply(varlist, function(v)
do.call(rbind, lapply(branch_pairs,
\(pair) get_diff(v, pair[1], pair[2])))))
diff_df <- diff_df %>%
mutate(
p_fmt = ifelse(
is.na(p_value), "NA",
ifelse(p_value < 0.001, "\\textless0.001",
sprintf("%.3f", p_value))
),
diff_p = ifelse(
variable %in% c("Minutes to reproduction",
"Minutes to first minor error",
"Minutes to first major error"),
paste0(sprintf("%.1f", diff_mean), "<br>(", p_fmt, ")"),
paste0(sprintf("%.3f", diff_mean), "<br>(", p_fmt, ")")
),
comp_col = gsub(" vs ", "_", comparison)
) %>%
dplyr::select(variable, comp_col, diff_p) %>%
pivot_wider(names_from = comp_col, values_from = diff_p)
# Merge means/SDs and differences
final_table <- wide_stats %>%
left_join(diff_df, by="variable") %>%
mutate(across(everything(),
~ ifelse(is.na(.) | . == "NA<br>(NA)", "-<br>(-)", .)))
# Simple column names
colnames(final_table) <- c("\\textbf{Variable}",
"\\textbf{Human-Only}",
"\\textbf{AI-Assisted}",
"\\textbf{AI-Led}",
"\\textbf{\\shortstack{Human-Only\\\\vs\\\\AI-Assisted}}",
"\\textbf{\\shortstack{Human-Only\\\\vs\\\\AI-Led}}",
"\\textbf{\\shortstack{AI-Assisted\\\\vs\\\\AI-Led}}")
# Convert <br> to \\, wrap in \shortstack
final_table_clean <- final_table %>%
mutate(across(-names(final_table[1,1]), ~gsub("<br>", "\\\\\\\\", .))) %>%
mutate(across(-names(final_table[1,1]), ~paste0("\\shortstack{", . ,"}")))
# Build LaTeX body with kableExtra
table_body <- kable(final_table_clean,
format = "latex",
align  = c("l", "c", "c", "c", "c", "c", "c"),
escape = FALSE,
booktabs = TRUE,
linesep = "") %>%
row_spec(1:(nrow(final_table_clean)-1), extra_latex_after = "[1em]")
# Write the LaTeX table file
cat(
"\\begin{table}[ht]
\\centering
\\caption{Comparison of Human, AI-Assisted, and AI-Led Metrics", caption_add, "}\n",
paste0("\\label{tab:comparison_metrics", label_add, "}\n"),
"{\\scriptsize\n",
table_body, "\n",
"\\multicolumn{7}{p{0.9\\textwidth}}{\\textit{Note:} Standard errors in parentheses for individual branches (Human-only, AI-Assisted, and AI-Led); p-values in parentheses for branch comparisons (Human-Only vs AI-Assisted, Human-Only vs AI-Led, and AI-Assisted vs AI-Led).}}\n",
"\\end{table}",
file = paste0("output/tables/branches", suffix, ".tex"))
}
# =========== TABLE 1: All Games ===================
make_latex_table(df, suffix = "", caption_add = "", label_add = "_third")
View(df)
############################################################
## FULL SCRIPT – outputs a simple LaTeX table like sample ##
############################################################
## 2. Read data -------------------------------------------------
df <- data.frame(readRDS("data/AI games.rds"))
## 3. Basic prep ------------------------------------------------
df$branch <- as.factor(df$branch)
branch_labels <- c("1" = "Human-Only",
"2" = "AI-Assisted",
"3" = "AI-Led")
df$branch <- forcats::fct_recode(df$branch, !!!branch_labels)
varlist <- c("reproduction",        "time2_reproduction",
"minor_errors",        "time2_first_minor",
"major_errors",        "time2_first_major",
"one_good_robustness", "two_good_robustness",
"ran_one_robustness",  "ran_two_robustness")
df[varlist] <- lapply(df[varlist], as.numeric)
var_labels <- c(
reproduction          = "Reproduction",
time2_reproduction    = "Minutes to reproduction",
minor_errors          = "Number of minor errors",
time2_first_minor     = "Minutes to first minor error",
major_errors          = "Number of major errors",
time2_first_major     = "Minutes to first major error",
one_good_robustness   = "At least one good robustness check",
two_good_robustness   = "At least two good robustness checks",
ran_one_robustness    = "Ran at least one good robustness check",
ran_two_robustness    = "Ran at least two good robustness checks"
)
# ========== Function to produce table ==============
make_latex_table <- function(df, suffix = "", caption_add = "", label_add = "") {
# Means & SDs
stats_df <- df %>%
group_by(branch) %>%
summarise(across(all_of(varlist),
list(mean = ~mean(.x, na.rm = TRUE),
sd   = ~sd(.x,   na.rm = TRUE)),
.names = "{col}_{fn}"),
.groups = "drop")
long_df <- stats_df %>%
pivot_longer(
cols         = -branch,
names_to     = c("variable", "stat"),
names_pattern = "^(.*)_(mean|sd)$"
) %>%
mutate(
variable = dplyr::recode(variable, !!!var_labels)
)
wide_stats <- long_df %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(mean_sd = ifelse(
variable %in% c("Minutes to reproduction",
"Minutes to first minor error",
"Minutes to first major error"),
paste0(sprintf("%.1f", mean), "<br>(", sprintf("%.1f", sd), ")"),
paste0(sprintf("%.3f", mean), "<br>(", sprintf("%.3f", sd), ")")
)) %>%
dplyr::select(variable, branch, mean_sd) %>%
pivot_wider(names_from = branch, values_from = mean_sd)
# Pair-wise differences & p-values
branches     <- levels(df$branch)
branch_pairs <- combn(branches, 2, simplify = FALSE)
get_diff <- function(var, b1, b2){
d1 <- df %>% filter(branch == b1) %>% pull(!!sym(var))
d2 <- df %>% filter(branch == b2) %>% pull(!!sym(var))
diff <- pval <- NA_real_
if(length(na.omit(d1))>1 && length(na.omit(d2))>1){
tmp  <- tryCatch(t.test(d1,d2,var.equal=TRUE), error=function(e) NULL)
if(!is.null(tmp)){
diff <- mean(d1,na.rm=TRUE)-mean(d2,na.rm=TRUE)
pval <- tmp$p.value
}
}
data.frame(variable   = var_labels[[var]],
comparison = paste(b1,"vs",b2),
diff_mean  = diff,
p_value    = pval,
stringsAsFactors=FALSE)
}
diff_df <- do.call(rbind,
lapply(varlist, function(v)
do.call(rbind, lapply(branch_pairs,
\(pair) get_diff(v, pair[1], pair[2])))))
diff_df <- diff_df %>%
mutate(
p_fmt = ifelse(
is.na(p_value), "NA",
ifelse(p_value < 0.001, "\\textless0.001",
sprintf("%.3f", p_value))
),
diff_p = ifelse(
variable %in% c("Minutes to reproduction",
"Minutes to first minor error",
"Minutes to first major error"),
paste0(sprintf("%.1f", diff_mean), "<br>(", p_fmt, ")"),
paste0(sprintf("%.3f", diff_mean), "<br>(", p_fmt, ")")
),
comp_col = gsub(" vs ", "_", comparison)
) %>%
dplyr::select(variable, comp_col, diff_p) %>%
pivot_wider(names_from = comp_col, values_from = diff_p)
# Merge means/SDs and differences
final_table <- wide_stats %>%
left_join(diff_df, by="variable") %>%
mutate(across(everything(),
~ ifelse(is.na(.) | . == "NA<br>(NA)", "-<br>(-)", .)))
# Simple column names
colnames(final_table) <- c("\\textbf{Variable}",
"\\textbf{Human-Only}",
"\\textbf{AI-Assisted}",
"\\textbf{AI-Led}",
"\\textbf{\\shortstack{Human-Only\\\\vs\\\\AI-Assisted}}",
"\\textbf{\\shortstack{Human-Only\\\\vs\\\\AI-Led}}",
"\\textbf{\\shortstack{AI-Assisted\\\\vs\\\\AI-Led}}")
# Convert <br> to \\, wrap in \shortstack
final_table_clean <- final_table %>%
mutate(across(-names(final_table[1,1]), ~gsub("<br>", "\\\\\\\\", .))) %>%
mutate(across(-names(final_table[1,1]), ~paste0("\\shortstack{", . ,"}")))
# Build LaTeX body with kableExtra
table_body <- kable(final_table_clean,
format = "latex",
align  = c("l", "c", "c", "c", "c", "c", "c"),
escape = FALSE,
booktabs = TRUE,
linesep = "") %>%
row_spec(1:(nrow(final_table_clean)-1), extra_latex_after = "[1em]")
# Write the LaTeX table file
cat(
"\\begin{table}[ht]
\\centering
\\caption{Comparison of Human, AI-Assisted, and AI-Led Metrics", caption_add, "}\n",
paste0("\\label{tab:comparison_metrics", label_add, "}\n"),
"{\\scriptsize\n",
table_body, "\n",
"\\multicolumn{7}{p{0.9\\textwidth}}{\\textit{Note:} Standard errors in parentheses for individual branches (Human-only, AI-Assisted, and AI-Led); p-values in parentheses for branch comparisons (Human-Only vs AI-Assisted, Human-Only vs AI-Led, and AI-Assisted vs AI-Led).}}\n",
"\\end{table}",
file = paste0("output/tables/branches", suffix, ".tex"))
}
# =========== TABLE 1: All Games ===================
make_latex_table(df, suffix = "", caption_add = "", label_add = "_third")
# =========== TABLE 2: Excluding game 9 ============
df_no9 <- df %>% filter(game != "Virtual 2025")
make_latex_table(df_no9, suffix = "_s1", caption_add = " (Study 1)", label_add = "_third_s1")
################################################################################
## Kaplan–Meier (risk-curve) figures for the AI-Games study                   ##
################################################################################
# ---- 0. Load packages ---------------------------------------------------------
library(dplyr)
library(forcats)
library(ggplot2)
library(survival)
library(ggsurvfit)
# ---- 1. Read & prepare data ---------------------------------------------------
main <- readRDS("data/AI games.rds") |>
group_by(branch) |>
mutate(branch_team_n = row_number()) |>
ungroup()
# ---- 2. Build a named list with the two datasets ------------------------------
#   • all          : full sample (your original plots)
#   • all_noV2025  : sample excluding game == "Virtual 2025"
datasets <- list(
all         = main,
all_noV2025 = main |> filter(game != "Virtual 2025")
)
# ---- 3. Variables & axis labels ----------------------------------------------
varlist <- c("time2_reproduction", "time2_first_minor", "time2_first_major")
xtitles <- c(
time2_reproduction = "Minutes to reproduction",
time2_first_minor  = "Minutes to first minor error",
time2_first_major  = "Minutes to first major error"
)
# ---- 4. Aesthetics ------------------------------------------------------------
fill_colors <- c("Human-Only" = "#0072B2",
"AI-Assisted" = "#D55E00",
"AI-Led"      = "#009E73")
dir.create("output/figures", showWarnings = FALSE, recursive = TRUE)
# ---- 5. Loop over datasets *and* variables ------------------------------------
for (dname in names(datasets)) {
dat <- datasets[[dname]]
suffix <- ifelse(dname == "all", "", " (s1)")  # file-name tag
for (var in varlist) {
# a. Prep survival frame (censor at 420 min)
df <- dat |>
mutate(event = ifelse(!is.na(.data[[var]]), 1, 0),
time  = ifelse(is.na(.data[[var]]), 420, .data[[var]])) |>
select(branch_team_n, branch, time, event)
# b. Fit Kaplan-Meier
survmod <- survfit2(Surv(time, event) ~ branch, data = df)
# c. Draw
p <- ggsurvfit(survmod, type = "risk") +
add_confidence_interval() +
labs(
x = xtitles[[var]],
y = "Cumulative proportion"
) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
ylim(0, 1) +
theme_minimal(base_size = 13) +
theme(
panel.grid.minor = element_blank(),
plot.background  = element_rect(fill = "white", colour = NA),
legend.position  = "top",
legend.title     = element_blank()
)
# d. Save
ggsave(
sprintf("output/figures/%s%s.pdf", var, suffix),
plot   = p,
width  = 8,
height = 4
)
}
}
################################################################################
## Kaplan–Meier (risk-curve) figures for the AI-Games study                   ##
################################################################################
# ---- 0. Load packages ---------------------------------------------------------
library(dplyr)
library(forcats)
library(ggplot2)
library(survival)
library(ggsurvfit)
# ---- 1. Read & prepare data ---------------------------------------------------
main <- readRDS("data/AI games.rds") |>
group_by(branch) |>
mutate(branch_team_n = row_number()) |>
ungroup()
# ---- 2. Build a named list with the two datasets ------------------------------
#   • all          : full sample (your original plots)
#   • all_noV2025  : sample excluding game == "Virtual 2025"
datasets <- list(
all         = main,
all_noV2025 = main |> filter(game != "Virtual 2025")
)
# ---- 3. Variables & axis labels ----------------------------------------------
varlist <- c("time2_reproduction", "time2_first_minor", "time2_first_major")
xtitles <- c(
time2_reproduction = "Minutes to reproduction",
time2_first_minor  = "Minutes to first minor error",
time2_first_major  = "Minutes to first major error"
)
# ---- 4. Aesthetics ------------------------------------------------------------
fill_colors <- c("Human-Only" = "#0072B2",
"AI-Assisted" = "#D55E00",
"AI-Led"      = "#009E73")
dir.create("output/figures", showWarnings = FALSE, recursive = TRUE)
# ---- 5. Loop over datasets *and* variables ------------------------------------
for (dname in names(datasets)) {
dat <- datasets[[dname]]
suffix <- ifelse(dname == "all", "", " (s1)")  # file-name tag
for (var in varlist) {
# a. Prep survival frame (censor at 420 min)
df <- dat |>
mutate(event = ifelse(!is.na(.data[[var]]), 1, 0),
time  = ifelse(is.na(.data[[var]]), 420, .data[[var]])) |>
dplyr::select(branch_team_n, branch, time, event)
# b. Fit Kaplan-Meier
survmod <- survfit2(Surv(time, event) ~ branch, data = df)
# c. Draw
p <- ggsurvfit(survmod, type = "risk") +
add_confidence_interval() +
labs(
x = xtitles[[var]],
y = "Cumulative proportion"
) +
scale_color_manual(values = fill_colors) +
scale_fill_manual(values = fill_colors) +
ylim(0, 1) +
theme_minimal(base_size = 13) +
theme(
panel.grid.minor = element_blank(),
plot.background  = element_rect(fill = "white", colour = NA),
legend.position  = "top",
legend.title     = element_blank()
)
# d. Save
ggsave(
sprintf("output/figures/%s%s.pdf", var, suffix),
plot   = p,
width  = 8,
height = 4
)
}
}
# ===========================================
# Master R Script for AI Paper Replication
# ===========================================
# ---- Tell {here} where the project root is ----
# (Adjust the path below if you move this file.)
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
here::i_am("code/R code/master_script.R")
# ===========================================
# Master R Script for AI Paper Replication
# ===========================================
# ---- Tell {here} where the project root is ----
# (Adjust the path below if you move this file.)
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
here::i_am("~/code/R code/master_script.R")
# Run this from within your project (or setwd() to that folder first)
file.create(" /Users/jposada/Library/CloudStorage/Dropbox/I4R/AI paper/.here")
# Run this from within your project (or setwd() to that folder first)
file.create("/Users/jposada/Library/CloudStorage/Dropbox/I4R/AI paper/.here")
# ===========================================
# Master R Script for AI Paper Replication
# — version that relies only on {here} —
# File location (relative to project root):
#   code/R code/master.R
# ===========================================
# ---- Declare project root ----
# Put an `.Rproj` file or a dummy `.here` file in the folder
# “…/Dropbox/I4R/AI paper” so {here} can recognise it.
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
here::i_am("code/R code/master.R")   # ← **THIS FILE’S RELATIVE PATH**
# ---- Load required packages ----
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pkgs <- c(
"haven", "rmarkdown", "readxl",
"dplyr", "stringr", "tidyr", "forcats", "janitor", "lubridate",
"fixest", "purrr", "broom", "tibble", "car", "margins",
"sandwich", "lmtest", "multcomp", "kableExtra",
"ggplot2", "patchwork", "modelsummary",
"ggsurvfit", "survRM2", "xtable"
)
pacman::p_load(char = pkgs, install = TRUE, character.only = TRUE)
# ---- Start logging ----
log_file <- here::here("output", "master_log_R.log")
sink(log_file, split = TRUE)
cat("=== MASTER LOG START ===\n")
# ---- 1. Cleaning raw data ----
cat("\n--- Cleaning raw data ---\n")
source(here::here("code", "R code", "cleaning.R"))
rm(list = ls())
# ---- 2. Main Tables (regression outputs) ----
cat("\n--- Main Table (OLS) ---\n")
source(here::here("code", "R code", "main.R"))
rm(list = ls())
cat("\n--- Main Table (Logit and Poisson) ---\n")
source(here::here("code", "R code", "logit poisson.R"))
rm(list = ls())
cat("\n--- Main Table (Full Controls) ---\n")
source(here::here("code", "R code", "full controls.R"))
rm(list = ls())
cat("\n--- Main Table (Softwares) ---\n")
source(here::here("code", "R code", "softwares.R"))
rm(list = ls())
cat("\n--- Main Table (Error Shares) ---\n")
source(here::here("code", "R code", "error shares.R"))
rm(list = ls())
cat("\n--- Main Table (Study 2 Interaction) ---\n")
source(here::here("code", "R code", "study 2.R"))
rm(list = ls())
cat("\n--- Main Table (Power) ---\n")
source(here::here("code", "R code", "power.R"))
rm(list = ls())
# ---- 3. Branch Differences Table ----
cat("\n--- Branch Differences Table ---\n")
source(here::here("code", "R code", "branches.R"))
rm(list = ls())
# ---- 4. Balance Tables ----
cat("\n--- Balance Tables ---\n")
source(here::here("code", "R code", "balance.R"))
rm(list = ls())
# ---- 5. ChatGPT Skill Tables ----
cat("\n--- ChatGPT Skill Tables ---\n")
source(here::here("code", "R code", "gpt skill.R"))
rm(list = ls())
# ---- 6. Prompts Usage Tables ----
cat("\n--- Prompts Usage Tables ---\n")
source(here::here("code", "R code", "prompts.R"))
rm(list = ls())
# ---- 7. RMST Tables ----
cat("\n--- RMST Tables ---\n")
source(here::here("code", "R code", "rmst.R"))
rm(list = ls())
# ---- 8. Figures ----
cat("\n--- Figure: Time to First Cumulative Density ---\n")
source(here::here("code", "R code", "time to first.R"))
rm(list = ls())
cat("\n--- Figure: Reproduction Rates Over Time ---\n")
source(here::here("code", "R code", "reproduction rates.R"))
rm(list = ls())
cat("\n--- Figure: Prompt Distribution ---\n")
source(here::here("code", "R code", "prompt distribution.R"))
rm(list = ls())
# ---- Finish logging ----
cat("\n=== MASTER LOG END ===\n")
sink()
