"Mean of dep. var"               = sprintf("%.3f", ymean),
"p-val (AI-Assisted vs. AI-Led)" = sprintf("%.3f", pval),
"Observations"                   = nobs(fit))
attr(fit, "add_lines") <- extras
fit
}
# dependent variables (order mirrors Stata script)
depvars <- c("reproduction", "minor_errors", "major_errors",
"one_good_robustness", "two_good_robustness",
"ran_one_robustness",  "ran_two_robustness")
# column titles
coltitles <- c("Reproduction", "Minor errors", "Major errors",
"One good robustness", "Two good robustness",
"Ran one robustness", "Ran two robustness")
# ─────────────────────
# 3.  Run regressions
# ─────────────────────
mods_A <- lapply(depvars, run_model, data = filter(dat, game != 9))
mods_B <- lapply(depvars, run_model, data = dat)
names(mods_A) <- names(mods_B) <- coltitles
# pull custom rows from each model
extract_rows <- function(modlist) {
lines <- lapply(modlist, attr, which = "add_lines")
data.frame(term = names(lines[[1]]),
do.call(cbind, lines),
check.names = FALSE)
}
rows_A <- extract_rows(mods_A)
rows_B <- extract_rows(mods_B)
# ─────────────────────
# 4.  Export LaTeX
# ─────────────────────
dir.create("output/tables", recursive = TRUE, showWarnings = FALSE)
common_opts <- list(
stars      = TRUE,
statistic  = c("({std.error})", "[{conf.low}; {conf.high}]"),
coef_omit  = "Intercept|number_teammates",
fmt        = 3,
gof_omit   = "R2|Adj|AIC|BIC|Log.Lik|[Rr]esid",
escape     = FALSE
)
## ---------- Panel A (replace file) ----------
args_A <- c(
list(
models   = mods_A,
add_rows = rows_A,
title    = "Panel A: Excluding game 9",
notes    = c("Standard errors in parentheses; confidence intervals in brackets.",
"Human-only branch (1) omitted.",
"Controls include number of teammates; game–software, skill, and attendance fixed effects.",
"$^{*}p<0.10$; $^{**}p<0.05$; $^{***}p<0.01$."),
output   = "output/tables/main_reg_panels_R.tex"
),
common_opts
)
do.call(modelsummary, args_A)
## ---------- Panel B (append) ----------
args_B <- c(
list(
models   = mods_B,
add_rows = rows_B,
title    = "Panel B: Full sample",
notes    = NULL,        # keep footer only once
output   = "output/tables/main_reg_panels_R.tex",
append   = TRUE
),
common_opts
)
do.call(modelsummary, args_B)
################################################################################
#  End                                                                          #
################################################################################
################################################################################
#  Replication-Games regressions (R version)                                   #
#  – Panel A: sample restricted to game ≠ 9                                    #
#  – Panel B: full sample                                                      #
#  Output:  output/tables/main_reg_panels_R.tex                                #
################################################################################
# ─────────────────────
# 0.  Packages & global options
# ─────────────────────
required <- c("haven", "fixest", "modelsummary", "dplyr", "kableExtra")
invisible(lapply(required, function(p) {
if (!requireNamespace(p, quietly = TRUE)) install.packages(p)
library(p, character.only = TRUE)
}))
## Tell modelsummary to build classic booktabs tables via {kableExtra}
options(modelsummary_factory_default       = "kable",
modelsummary_format_numeric_latex  = "plain")   # no \num{}
# ─────────────────────
# 1.  Load data
# ─────────────────────
dat <- read_dta("~/Dropbox/I4R/AI paper/data/AI games.dta") |>
mutate(branch = factor(branch))          # reference level = 1
# ─────────────────────
# 2.  Helper to run one model
# ─────────────────────
run_model <- function(dep, data) {
fml <- as.formula(
paste0(dep,
" ~ i(branch, ref = 1) + number_teammates | ",
"game:software + max_skill + min_skill + ",
"min_gpt + max_gpt + attendance")
)
fit <- feols(fml, data = data, vcov = "HC1")
# extra summary rows ---------------------------------------------------------
ymean <- mean(data[[dep]], na.rm = TRUE)
pval  <- unname( as.numeric( wald(fit, "branch::2 - branch::3 = 0") ) )
extras <- c("Controls"                       = "\\checkmark",
"Mean of dep. var"               = sprintf("%.3f", ymean),
"p-val (AI-Assisted vs. AI-Led)" = sprintf("%.3f", pval),
"Observations"                   = nobs(fit))
attr(fit, "add_lines") <- extras
fit
}
# dependent variables (order mirrors Stata script)
depvars <- c("reproduction", "minor_errors", "major_errors",
"one_good_robustness", "two_good_robustness",
"ran_one_robustness",  "ran_two_robustness")
# column titles
coltitles <- c("Reproduction", "Minor errors", "Major errors",
"One good robustness", "Two good robustness",
"Ran one robustness", "Ran two robustness")
# ─────────────────────
# 3.  Run regressions
# ─────────────────────
mods_A <- lapply(depvars, run_model, data = filter(dat, game != 9))
mods_B <- lapply(depvars, run_model, data = dat)
names(mods_A) <- names(mods_B) <- coltitles
# pull custom rows from each model
extract_rows <- function(modlist) {
lines <- lapply(modlist, attr, which = "add_lines")
data.frame(term = names(lines[[1]]),
do.call(cbind, lines),
check.names = FALSE)
}
rows_A <- extract_rows(mods_A)
rows_B <- extract_rows(mods_B)
# ─────────────────────
# 4.  Export LaTeX
# ─────────────────────
dir.create("output/tables", recursive = TRUE, showWarnings = FALSE)
common_opts <- list(
stars      = TRUE,
statistic  = c("({std.error})", "[{conf.low}; {conf.high}]"),
coef_omit  = "Intercept|number_teammates",
fmt        = 3,
gof_omit   = "R2|Adj|AIC|BIC|Log.Lik|[Rr]esid",
escape     = FALSE
)
## ---------- Panel A (replace file) ----------
args_A <- c(
list(
models   = mods_A,
add_rows = rows_A,
title    = "Panel A: Excluding game 9",
notes    = c("Standard errors in parentheses; confidence intervals in brackets.",
"Human-only branch (1) omitted.",
"Controls include number of teammates; game–software, skill, and attendance fixed effects.",
"$^{*}p<0.10$; $^{**}p<0.05$; $^{***}p<0.01$."),
output   = "output/tables/main_reg_panels_R.tex",
booktabs = TRUE                        # ensure \\toprule etc.
),
common_opts
)
do.call(modelsummary, args_A)
################################################################################
#  Replication-Games regressions (R version)                                   #
#  – Panel A: sample restricted to game ≠ 9                                    #
#  – Panel B: full sample                                                      #
#  Output:  output/tables/main_reg_panels_R.tex                                #
################################################################################
# ─────────────────────
# 0.  Packages & global options
# ─────────────────────
required <- c("haven", "fixest", "modelsummary", "dplyr", "kableExtra")
invisible(lapply(required, function(p) {
if (!requireNamespace(p, quietly = TRUE)) install.packages(p)
library(p, character.only = TRUE)
}))
## Tell modelsummary to use classic booktabs tables via {kableExtra}
options(
modelsummary_factory_default      = "kableExtra",   # <- valid factory name
modelsummary_format_numeric_latex = "plain"         # plain numbers, no \num{}
)
# ─────────────────────
# 1.  Load data
# ─────────────────────
dat <- read_dta("~/Dropbox/I4R/AI paper/data/AI games.dta") |>
mutate(branch = factor(branch))            # reference level = 1
# ─────────────────────
# 2.  Helper to run one model
# ─────────────────────
run_model <- function(dep, data) {
fml <- as.formula(
paste0(dep,
" ~ i(branch, ref = 1) + number_teammates | ",
"game:software + max_skill + min_skill + ",
"min_gpt + max_gpt + attendance")
)
fit <- feols(fml, data = data, vcov = "HC1")
# extra summary rows ---------------------------------------------------------
ymean <- mean(data[[dep]], na.rm = TRUE)
pval  <- unname( as.numeric( wald(fit, "branch::2 - branch::3 = 0") ) )
extras <- c("Controls"                       = "\\checkmark",
"Mean of dep. var"               = sprintf("%.3f", ymean),
"p-val (AI-Assisted vs. AI-Led)" = sprintf("%.3f", pval),
"Observations"                   = nobs(fit))
attr(fit, "add_lines") <- extras
fit
}
# dependent variables (order mirrors Stata script)
depvars <- c("reproduction", "minor_errors", "major_errors",
"one_good_robustness", "two_good_robustness",
"ran_one_robustness",  "ran_two_robustness")
# column titles
coltitles <- c("Reproduction", "Minor errors", "Major errors",
"One good robustness", "Two good robustness",
"Ran one robustness", "Ran two robustness")
# ─────────────────────
# 3.  Run regressions
# ─────────────────────
mods_A <- lapply(depvars, run_model, data = filter(dat, game != 9))
mods_B <- lapply(depvars, run_model, data = dat)
names(mods_A) <- names(mods_B) <- coltitles
# pull custom rows from each model
extract_rows <- function(modlist) {
lines <- lapply(modlist, attr, which = "add_lines")
data.frame(term = names(lines[[1]]),
do.call(cbind, lines),
check.names = FALSE)
}
rows_A <- extract_rows(mods_A)
rows_B <- extract_rows(mods_B)
# ─────────────────────
# 4.  Export LaTeX
# ─────────────────────
dir.create("output/tables", recursive = TRUE, showWarnings = FALSE)
common_opts <- list(
stars      = TRUE,
statistic  = c("({std.error})", "[{conf.low}; {conf.high}]"),
coef_omit  = "Intercept|number_teammates",
fmt        = 3,
gof_omit   = "R2|Adj|AIC|BIC|Log.Lik|[Rr]esid",
escape     = FALSE,
booktabs   = TRUE                        # ensures \toprule etc.
)
## ---------- Panel A (replace file) ----------
args_A <- c(
list(
models   = mods_A,
add_rows = rows_A,
title    = "Panel A: Excluding game 9",
notes    = c("Standard errors in parentheses; confidence intervals in brackets.",
"Human-only branch (1) omitted.",
"Controls include number of teammates; game–software, skill, and attendance fixed effects.",
"$^{*}p<0.10$; $^{**}p<0.05$; $^{***}p<0.01$."),
output   = "output/tables/main_reg_panels_R.tex"
),
common_opts
)
do.call(modelsummary, args_A)
## ---------- Panel B (append) ----------
args_B <- c(
list(
models   = mods_B,
add_rows = rows_B,
title    = "Panel B: Full sample",
notes    = NULL,                       # footer appears only once
output   = "output/tables/main_reg_panels_R.tex",
append   = TRUE
),
common_opts
)
do.call(modelsummary, args_B)
################################################################################
#  End                                                                          #
################################################################################
# ------------------------------------------------------------
# 1) Cambiar al directorio de tu proyecto
# ------------------------------------------------------------
project_path <- "/Users/jposada/Library/CloudStorage/Dropbox/I4R/AI paper"
setwd(project_path)
# ------------------------------------------------------------
# 2) Inicializar un repositorio Git local
# ------------------------------------------------------------
system("git init")
# ------------------------------------------------------------
# 3) (Opcional) Crear un README.md si no existe
# ------------------------------------------------------------
if (!file.exists("README.md")) {
cat("# AI-Games\n\nRepositorio para el proyecto AI paper.", file = "README.md")
}
# ------------------------------------------------------------
# 4) Añadir todos los archivos al área de staging
# ------------------------------------------------------------
system("git add .")
# ------------------------------------------------------------
# 5) Hacer el primer commit
# ------------------------------------------------------------
system('git commit -m "Initial commit: añadir proyecto existente"')
# ------------------------------------------------------------
# 6) Asegurarse de que la rama principal se llame "main"
# ------------------------------------------------------------
system("git branch -M main")
# ------------------------------------------------------------
# 7) Establecer el remoto "origin" apuntando a GitHub (SSH)
#    Como ya tienes tu llave SSH configurada, bastará con:
# ------------------------------------------------------------
system("git remote add origin git@github.com:juposada93/AI-Games.git")
# ------------------------------------------------------------
# 8) Empujar (push) el commit a GitHub
# ------------------------------------------------------------
system("git push -u origin main")
# ------------------------------------------------------------
# Fin: ahora tu carpeta local está ligada al repo de GitHub
# ------------------------------------------------------------
message("✅ El repositorio se creó y se subió a GitHub correctamente.")
# Reproducibility, Coding-Error Detection & Robustness
### Comparing the Performance of Humans, Cyborgs & (Lightly‑Supervised) Machines
# ===========================================
# Master R Script for AI Paper Replication
# File location (relative to project root):
#   code/R code/master.R
# ===========================================
# ---- Declare project root ----
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
here::i_am("code/R code/master.R")
########################################################################
##  MAIN SCRIPT – normalised minor / major errors (share within paper)
########################################################################
# ---------- 1. Read data ----------------------------------------------
main <- readRDS("data/AI games.rds")
# ---------- 2. Helper: normalise within paper -------------------------
normalise_errors <- function(df) {
df %>%
group_by(paper) %>%                      # <— make sure `paper` exists
mutate(
minor_errors = minor_errors / max(minor_errors, na.rm = TRUE),
major_errors = major_errors / max(major_errors, na.rm = TRUE)
) %>%
ungroup()
}
# ---------- 3. Prepare Panel-specific data ----------------------------
rownames(main) <- 1:nrow(main)              # keep row IDs
panelA_data <- main %>%
filter(game != "Virtual 2025") %>%
{rownames(.) <- 1:nrow(.); .}
# ===========================================
# Master R Script for AI Paper Replication
# File location (relative to project root):
#   code/R code/master.R
# ===========================================
# ---- Declare project root ----
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
here::i_am("code/R code/master.R")
# ---- Load required packages ----
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pkgs <- c(
"haven", "rmarkdown", "readxl",
"dplyr", "stringr", "tidyr", "forcats", "janitor", "lubridate",
"fixest", "purrr", "broom", "tibble", "car", "margins",
"sandwich", "lmtest", "multcomp", "kableExtra",
"ggplot2", "patchwork", "modelsummary",
"ggsurvfit", "survRM2", "xtable"
)
pacman::p_load(char = pkgs, install = TRUE, character.only = TRUE)
########################################################################
##  MAIN SCRIPT – normalised minor / major errors (share within paper)
########################################################################
# ---------- 1. Read data ----------------------------------------------
main <- readRDS("data/AI games.rds")
# ---------- 2. Helper: normalise within paper -------------------------
normalise_errors <- function(df) {
df %>%
group_by(paper) %>%                      # <— make sure `paper` exists
mutate(
minor_errors = minor_errors / max(minor_errors, na.rm = TRUE),
major_errors = major_errors / max(major_errors, na.rm = TRUE)
) %>%
ungroup()
}
# ---------- 3. Prepare Panel-specific data ----------------------------
rownames(main) <- 1:nrow(main)              # keep row IDs
panelA_data <- main %>%
filter(game != "Virtual 2025") %>%
{rownames(.) <- 1:nrow(.); .}
# normalise
main        <- normalise_errors(main)
panelA_data <- normalise_errors(panelA_data)
# ---------- 4. Create FE variables & cast factors ---------------------
prep_factors <- function(df){
df %>%
mutate(
game_software = interaction(game, software, drop = TRUE),
across(c(max_skill, min_skill, max_gpt, min_gpt,
attendance, branch), as.factor)
)
}
main        <- prep_factors(main)
panelA_data <- prep_factors(panelA_data)
# ---------- 5. Model lists --------------------------------------------
dep_vars <- c("minor_errors", "major_errors")      # ONLY cols 2 & 3 now
panelA_models <- map(dep_vars, ~
feols(
as.formula(paste(.x,
"~ branch + number_teammates | game_software +",
"max_skill + min_skill + attendance")),
data = panelA_data,
vcov = "hetero"
)
)
panelB_models <- map(dep_vars, ~
feols(
as.formula(paste(.x,
"~ branch + number_teammates | game_software +",
"max_skill + min_skill + attendance")),
data = main,
vcov = "hetero"
)
)
# ---------- 6. Utilities ----------------------------------------------
get_pval <- function(model){
lh <- tryCatch(
linearHypothesis(model,
"branchAI-Assisted = branchAI-Led",
vcov. = vcov(model, type = "HC1")),
error = function(e) NA
)
if (is.data.frame(lh) && nrow(lh) >= 2 &&
"Pr(>Chisq)" %in% names(lh)) as.numeric(lh[2,"Pr(>Chisq)"]) else NA
}
extract_summary <- function(model, dv, df){
ctab   <- broom::tidy(model, conf.int = TRUE)
aa_row <- ctab[ctab$term == "branchAI-Assisted", ]
al_row <- ctab[ctab$term == "branchAI-Led", ]
used   <- which(!is.na(model$fitted.values))
tibble(
coef_ai_assisted = aa_row$estimate %||% NA,
se_ai_assisted   = aa_row$std.error %||% NA,
ci_low_ai_assisted  = aa_row$conf.low %||% NA,
ci_high_ai_assisted = aa_row$conf.high %||% NA,
coef_ai_led      = al_row$estimate %||% NA,
se_ai_led        = al_row$std.error %||% NA,
ci_low_ai_led    = al_row$conf.low %||% NA,
ci_high_ai_led   = al_row$conf.high %||% NA,
ymean  = mean(df[[dv]][used], na.rm = TRUE),
N      = nobs(model),
pval   = get_pval(model)
)
}
# ---------- 7. Collect results ----------------------------------------
`%||%` <- function(a,b) if(length(a)) a else b  # null-coalesce helper
panelA_res <- map2(panelA_models, dep_vars,
~extract_summary(.x, .y, panelA_data))
panelB_res <- map2(panelB_models, dep_vars,
~extract_summary(.x, .y, main))
# ---------- 8. LaTeX table generator (2 columns) ----------------------
get_stars <- function(p) ifelse(is.na(p),"",
ifelse(p<0.01,"***", ifelse(p<0.05,"**", ifelse(p<0.1,"*",""))))
make_panel_latex <- function(res, label){
co  <- lapply(res, function(x) sprintf("%8.3f%s",
x$coef_ai_assisted, get_stars(x$pval)))
se  <- lapply(res, function(x) sprintf("(%8.3f)", x$se_ai_assisted))
ci  <- lapply(res, function(x) sprintf("[%8.3f; %8.3f]",
x$ci_low_ai_assisted, x$ci_high_ai_assisted))
co2 <- lapply(res, function(x) sprintf("%8.3f%s",
x$coef_ai_led, get_stars(x$pval)))
se2 <- lapply(res, function(x) sprintf("(%8.3f)", x$se_ai_led))
ci2 <- lapply(res, function(x) sprintf("[%8.3f; %8.3f]",
x$ci_low_ai_led, x$ci_high_ai_led))
y   <- lapply(res, function(x) sprintf("%8.3f", x$ymean))
p   <- lapply(res, function(x) ifelse(is.na(x$pval),"",
sprintf("%8.3f", x$pval)))
n   <- lapply(res, function(x) as.character(x$N))
out <- ""
out <- paste0(out,
"\\multicolumn{3}{l}{\\textbf{", label, "}}\\\\\n",
"& (1) & (2) \\\\\n",
"                    & Minor errors & Major errors \\\\\n\\hline\n",
"AI-Assisted         & ", paste(co , collapse=" & "), " \\\\\n",
"                    & ", paste(se , collapse=" & "), " \\\\\n",
"                    & ", paste(ci , collapse=" & "), " \\\\\n",
"AI-Led              & ", paste(co2, collapse=" & "), " \\\\\n",
"                    & ", paste(se2, collapse=" & "), " \\\\\n",
"                    & ", paste(ci2, collapse=" & "), " \\\\\n",
"\\hline\nControls   & \\checkmark & \\checkmark \\\\\n",
"Mean dep. var       & ", paste(y , collapse=" & "), " \\\\\n",
"p-val (AI-Assisted vs. AI-Led)    & ", paste(p , collapse=" & "), " \\\\\n",
"Obs.                & ", paste(n , collapse=" & "), " \\\\\n\\hline\n")
out
}
print_full_latex_table <- function(resA,resB){
cat("\\def\\sym#1{\\ifmmode^{#1}\\else\\(^{#1}\\)\\fi}\n",
"\\begin{tabular}{lcc}\n",
"\\hline\\hline\n", sep="")
cat(make_panel_latex(resA, "Panel A: Study 1"))
cat("\\\\\n")
cat(make_panel_latex(resB, "Panel B: Study 2 combined"))
cat("\\hline\\hline\n",
"\\multicolumn{3}{l}{\\it{Note:} Standard errors in",
" parentheses, confidence intervals in brackets; human-only branch omitted.}\\\\\n",
"\\multicolumn{3}{l}{Controls include number of teammates; game–software, skill, and attendance FEs.}\\\\\n",
"\\multicolumn{3}{l}{\\sym{*} $p<0.1$, \\sym{**} $p<0.05$, \\sym{***} $p<0.01$}\\\\\n",
"\\end{tabular}\n", sep=" ")
}
# ---------- 9. Save LaTeX ---------------------------------------------
dir.create("output/tables", showWarnings = FALSE, recursive = TRUE)
sink("output/tables/error_shares.tex")
print_full_latex_table(panelA_res, panelB_res)
sink()
?source
