long_exp_df <- stats_exp_df %>%
pivot_longer(-group,
names_to = c("variable","stat"),
names_pattern = "^(.*)_(mean|sd)$") %>%
mutate(variable = var_labels[variable])
wide_exp_stats <- long_exp_df %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(mean_sd = ifelse(variable %in%
c("Minutes to reproduction",
"Minutes to first minor error",
"Minutes to first major error"),
paste0(sprintf("%.1f", mean), "<br>(",
sprintf("%.1f", sd), ")"),
paste0(sprintf("%.3f", mean), "<br>(",
sprintf("%.3f", sd), ")")))
table_df <- wide_exp_stats %>%
dplyr::select(variable, group, mean_sd) %>%
tidyr::pivot_wider(names_from = group, values_from = mean_sd)
table_df[is.na(table_df)] <- "-"
# ---------------------------------------------------------------------------
# Compute 1–2 and 3–4 differences + Welch p-values
# (1 = AI-Assisted high, 2 = AI-Assisted low/int,
#  3 = AI-Led high,      4 = AI-Led low/int)
# ---------------------------------------------------------------------------
grp1 <- "AI-Assisted high"
grp2 <- "AI-Assisted low_intermediate"
grp3 <- "AI-Led high"
grp4 <- "AI-Led low_intermediate"
diff_list <- lapply(varlist, function(v){
a1 <- df_filtered %>% filter(group == grp1) %>% pull(!!sym(v))
a2 <- df_filtered %>% filter(group == grp2) %>% pull(!!sym(v))
a3 <- df_filtered %>% filter(group == grp3) %>% pull(!!sym(v))
a4 <- df_filtered %>% filter(group == grp4) %>% pull(!!sym(v))
t12 <- tryCatch(t.test(a1, a2, var.equal = FALSE)$p.value, error = \(e) NA_real_)
t34 <- tryCatch(t.test(a3, a4, var.equal = FALSE)$p.value, error = \(e) NA_real_)
tibble(variable_raw = v,
diff12 = mean(a1, na.rm = TRUE) - mean(a2, na.rm = TRUE),
p12    = t12,
diff34 = mean(a3, na.rm = TRUE) - mean(a4, na.rm = TRUE),
p34    = t34)
}) %>% bind_rows()
diff_list <- diff_list %>%
mutate(variable = var_labels[variable_raw]) %>%
dplyr::select(-variable_raw)
fmt_diff_p <- function(diff, p, minutes = FALSE){
diff_out <- ifelse(minutes, sprintf("%.1f", diff), sprintf("%.3f", diff))
p_out    <- ifelse(is.na(p), "NA",
ifelse(p < 0.001, "<0.001", sprintf("%.3f", p)))
# Add \relax so [ is not parsed as an optional argument
paste0(diff_out, "<br>\\relax[", p_out, "]")
}
diff_df <- diff_list %>%
mutate(
diff12_fmt = mapply(fmt_diff_p, diff12, p12,
minutes = variable %in%
c("Minutes to reproduction",
"Minutes to first minor error",
"Minutes to first major error")),
diff34_fmt = mapply(fmt_diff_p, diff34, p34,
minutes = variable %in%
c("Minutes to reproduction",
"Minutes to first minor error",
"Minutes to first major error"))
) %>%
dplyr::select(variable, diff12_fmt, diff34_fmt) %>%
rename(`AI-Assisted \\\\ High vs Low` = diff12_fmt,
`AI-Led \\\\ High vs Low`     = diff34_fmt)
# ---------------------------------------------------------------------------
# Merge means ± SD with difference columns
# ---------------------------------------------------------------------------
final_df <- table_df %>%
left_join(diff_df, by = "variable") %>%
rename(Variable = variable)
final_df[is.na(final_df)] <- "-"
# ---------------------------------------------------------------------------
# Add (n=) counts to the four original group headers
# ---------------------------------------------------------------------------
group_counts <- df_filtered %>% count(group, name = "n")
add_n <- function(colname_raw){
n_val <- group_counts %>% filter(group == colname_raw) %>% pull(n)
new   <- gsub("low_intermediate","low/medium", colname_raw)
new   <- gsub("AI-Assisted high","\\\\shortstack{AI-Assisted \\\\\\\\ high experience", new)
new   <- gsub("AI-Assisted low/medium","\\\\shortstack{AI-Assisted \\\\\\\\ low/medium experience", new)
new   <- gsub("AI-Led high","\\\\shortstack{AI-Led \\\\\\\\ high experience", new)
new   <- gsub("AI-Led low/medium","\\\\shortstack{AI-Led \\\\\\\\ low/medium experience", new)
paste0(new,"\\\\(n=", n_val, ")}")
}
orig_cols  <- names(final_df)
grp_cols   <- orig_cols[orig_cols %in% group_counts$group]
final_cols <- c("Variable",
sapply(grp_cols, add_n, USE.NAMES = FALSE),
"\\shortstack{AI-Assisted \\\\ High vs Low}",
"\\shortstack{AI-Led \\\\ High vs Low}")
names(final_df) <- final_cols
# ---------------------------------------------------------------------------
# Convert <br> to LaTeX line breaks and wrap in \shortstack
# ---------------------------------------------------------------------------
latex_df <- final_df %>%
mutate(across(everything(), ~ gsub("<br>", "\\\\\\\\", .x))) %>%
mutate(across(everything(), ~ paste0("\\shortstack{", .x, "}")))
# ---------------------------------------------------------------------------
# Build and write LaTeX table
# ---------------------------------------------------------------------------
table_body <- kable(latex_df,
format   = "latex",
booktabs = TRUE,
escape   = FALSE,
align    = c("l","c","c","c","c","c","c"),
hline_after = c(0),
linesep  = "") %>%
row_spec(1:(nrow(latex_df)-1), extra_latex_after = "[1em]") %>%
gsub("NA","-", .)
dir.create("output/tables", recursive = TRUE, showWarnings = FALSE)
cat(
"\\begin{table}[ht]
\\centering
\\caption{AI-Assisted and AI-Led Metrics by Experience Level}
\\label{tab:comparison_experience}
\\tiny", table_body,"\n",
"\multicolumn{7}{p{0.9\textwidth}}{\it{Note:} Columns 2--5 present means and standard errors in parentheses for individual groups (Human-only, AI-Assisted, and AI-Led); the difference columns show mean differences and $p$-values in brackets for the indicated group comparisons.}
# ---------------------------------------------------------------------------
# Load data and labels
# ---------------------------------------------------------------------------
df <- readRDS("data/AI games.rds") |> as.data.frame()
df$branch <- factor(df$branch)
branch_labels <- c("1" = "Human-Only", "2" = "AI-Assisted", "3" = "AI-Led")
df$branch <- dplyr::recode_factor(df$branch, !!!branch_labels)
varlist <- c("reproduction","time2_reproduction","minor_errors",
"time2_first_minor","major_errors","time2_first_major",
"one_good_robustness","two_good_robustness",
"ran_one_robustness","ran_two_robustness")
var_labels <- c(
reproduction = "Reproduction",
time2_reproduction = "Minutes to reproduction",
minor_errors = "Number of minor errors",
time2_first_minor = "Minutes to first minor error",
major_errors = "Number of major errors",
time2_first_major = "Minutes to first major error",
one_good_robustness = "At least one appropriate robustness check",
two_good_robustness = "At least two appropriate robustness checks",
ran_one_robustness = "Ran at least one appropriate robustness check",
ran_two_robustness = "Ran at least two appropriate robustness checks"
)
df[varlist] <- lapply(df[varlist], as.numeric)
# ---------------------------------------------------------------------------
# Create experience variable
# ---------------------------------------------------------------------------
df <- df %>%
mutate(
experience = case_when(
max_gpt %in% c("Never", "Beginner", "Intermediate") ~ "low_intermediate",
max_gpt == "Advanced" ~ "high",
TRUE ~ NA_character_
)
)
# ---------------------------------------------------------------------------
# Filter only AI-Assisted and AI-Led, and create group
# ---------------------------------------------------------------------------
df_filtered <- df %>%
filter(branch %in% c("AI-Assisted", "AI-Led"), !is.na(experience)) %>%
mutate(group = paste(branch, experience))
# ---------------------------------------------------------------------------
# Compute means & SDs per group
# ---------------------------------------------------------------------------
stats_exp_df <- df_filtered %>%
group_by(group) %>%
summarise(across(all_of(varlist),
list(mean = ~mean(.x, na.rm = TRUE),
sd   = ~sd(.x,   na.rm = TRUE)),
.names = "{col}_{fn}"),
.groups = "drop")
long_exp_df <- stats_exp_df %>%
pivot_longer(-group,
names_to = c("variable","stat"),
names_pattern = "^(.*)_(mean|sd)$") %>%
mutate(variable = var_labels[variable])
wide_exp_stats <- long_exp_df %>%
pivot_wider(names_from = stat, values_from = value) %>%
mutate(mean_sd = ifelse(variable %in%
c("Minutes to reproduction",
"Minutes to first minor error",
"Minutes to first major error"),
paste0(sprintf("%.1f", mean), "<br>(",
sprintf("%.1f", sd), ")"),
paste0(sprintf("%.3f", mean), "<br>(",
sprintf("%.3f", sd), ")")))
table_df <- wide_exp_stats %>%
dplyr::select(variable, group, mean_sd) %>%
tidyr::pivot_wider(names_from = group, values_from = mean_sd)
table_df[is.na(table_df)] <- "-"
# ---------------------------------------------------------------------------
# Compute 1–2 and 3–4 differences + Welch p-values
# (1 = AI-Assisted high, 2 = AI-Assisted low/int,
#  3 = AI-Led high,      4 = AI-Led low/int)
# ---------------------------------------------------------------------------
grp1 <- "AI-Assisted high"
grp2 <- "AI-Assisted low_intermediate"
grp3 <- "AI-Led high"
grp4 <- "AI-Led low_intermediate"
diff_list <- lapply(varlist, function(v){
a1 <- df_filtered %>% filter(group == grp1) %>% pull(!!sym(v))
a2 <- df_filtered %>% filter(group == grp2) %>% pull(!!sym(v))
a3 <- df_filtered %>% filter(group == grp3) %>% pull(!!sym(v))
a4 <- df_filtered %>% filter(group == grp4) %>% pull(!!sym(v))
t12 <- tryCatch(t.test(a1, a2, var.equal = FALSE)$p.value, error = \(e) NA_real_)
t34 <- tryCatch(t.test(a3, a4, var.equal = FALSE)$p.value, error = \(e) NA_real_)
tibble(variable_raw = v,
diff12 = mean(a1, na.rm = TRUE) - mean(a2, na.rm = TRUE),
p12    = t12,
diff34 = mean(a3, na.rm = TRUE) - mean(a4, na.rm = TRUE),
p34    = t34)
}) %>% bind_rows()
diff_list <- diff_list %>%
mutate(variable = var_labels[variable_raw]) %>%
dplyr::select(-variable_raw)
fmt_diff_p <- function(diff, p, minutes = FALSE){
diff_out <- ifelse(minutes, sprintf("%.1f", diff), sprintf("%.3f", diff))
p_out    <- ifelse(is.na(p), "NA",
ifelse(p < 0.001, "<0.001", sprintf("%.3f", p)))
# Add \relax so [ is not parsed as an optional argument
paste0(diff_out, "<br>\\relax[", p_out, "]")
}
diff_df <- diff_list %>%
mutate(
diff12_fmt = mapply(fmt_diff_p, diff12, p12,
minutes = variable %in%
c("Minutes to reproduction",
"Minutes to first minor error",
"Minutes to first major error")),
diff34_fmt = mapply(fmt_diff_p, diff34, p34,
minutes = variable %in%
c("Minutes to reproduction",
"Minutes to first minor error",
"Minutes to first major error"))
) %>%
dplyr::select(variable, diff12_fmt, diff34_fmt) %>%
rename(`AI-Assisted \\\\ High vs Low` = diff12_fmt,
`AI-Led \\\\ High vs Low`     = diff34_fmt)
# ---------------------------------------------------------------------------
# Merge means ± SD with difference columns
# ---------------------------------------------------------------------------
final_df <- table_df %>%
left_join(diff_df, by = "variable") %>%
rename(Variable = variable)
final_df[is.na(final_df)] <- "-"
# ---------------------------------------------------------------------------
# Add (n=) counts to the four original group headers
# ---------------------------------------------------------------------------
group_counts <- df_filtered %>% count(group, name = "n")
add_n <- function(colname_raw){
n_val <- group_counts %>% filter(group == colname_raw) %>% pull(n)
new   <- gsub("low_intermediate","low/medium", colname_raw)
new   <- gsub("AI-Assisted high","\\\\shortstack{AI-Assisted \\\\\\\\ high experience", new)
new   <- gsub("AI-Assisted low/medium","\\\\shortstack{AI-Assisted \\\\\\\\ low/medium experience", new)
new   <- gsub("AI-Led high","\\\\shortstack{AI-Led \\\\\\\\ high experience", new)
new   <- gsub("AI-Led low/medium","\\\\shortstack{AI-Led \\\\\\\\ low/medium experience", new)
paste0(new,"\\\\(n=", n_val, ")}")
}
orig_cols  <- names(final_df)
grp_cols   <- orig_cols[orig_cols %in% group_counts$group]
final_cols <- c("Variable",
sapply(grp_cols, add_n, USE.NAMES = FALSE),
"\\shortstack{AI-Assisted \\\\ High vs Low}",
"\\shortstack{AI-Led \\\\ High vs Low}")
names(final_df) <- final_cols
# ---------------------------------------------------------------------------
# Convert <br> to LaTeX line breaks and wrap in \shortstack
# ---------------------------------------------------------------------------
latex_df <- final_df %>%
mutate(across(everything(), ~ gsub("<br>", "\\\\\\\\", .x))) %>%
mutate(across(everything(), ~ paste0("\\shortstack{", .x, "}")))
# ---------------------------------------------------------------------------
# Build and write LaTeX table
# ---------------------------------------------------------------------------
table_body <- kable(latex_df,
format   = "latex",
booktabs = TRUE,
escape   = FALSE,
align    = c("l","c","c","c","c","c","c"),
hline_after = c(0),
linesep  = "") %>%
row_spec(1:(nrow(latex_df)-1), extra_latex_after = "[1em]") %>%
gsub("NA","-", .)
dir.create("output/tables", recursive = TRUE, showWarnings = FALSE)
cat(
"\\begin{table}[ht]\n",
"\\centering\n",
"\\caption{AI-Assisted and AI-Led Metrics by Experience Level}\n",
"\\label{tab:comparison_experience}\n",
"{\\tiny\n",
table_body, "\n",
"}\n",
"\\\\\n",
"\\multicolumn{7}{p{0.9\\textwidth}}{\\textit{Note:} Columns 2--5 present means and standard errors in parentheses for individual groups (Human-only, AI-Assisted, and AI-Led); the difference columns show mean differences and $p$-values in brackets for the indicated group comparisons.}\n",
"\\end{table}",
file = "output/tables/gpt skill.tex"
)
# ===========================================
# Master R Script for AI Paper Replication
# File location (relative to project root):
#   code/R code/master.R
# ===========================================
# ---- Declare project root ----
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
here::i_am("code/R code/master.R")
# ---- Load required packages ----
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pkgs <- c(
"haven", "rmarkdown", "readxl",
"dplyr", "stringr", "tidyr", "forcats", "janitor", "lubridate",
"fixest", "purrr", "broom", "tibble", "car", "margins",
"sandwich", "lmtest", "multcomp", "kableExtra",
"ggplot2", "patchwork", "modelsummary",
"ggsurvfit", "survRM2", "xtable"
)
pacman::p_load(char = pkgs, install = TRUE, character.only = TRUE)
# ---- Start logging ----
log_file <- here::here("output", "master_log_R.log")
sink(log_file, split = TRUE)
cat("=== MASTER LOG START ===\n")
# ---- 1. Cleaning raw data ----
cat("\n--- Cleaning raw data ---\n")
source(here::here("code", "R code", "cleaning.R"))
rm(list = ls())
# ---- 2. Main Tables (regression outputs) ----
cat("\n--- Main Table (OLS) ---\n")
source(here::here("code", "R code", "main.R"))
rm(list = ls())
cat("\n--- Main Table (Logit and Poisson) ---\n")
source(here::here("code", "R code", "logit poisson.R"))
rm(list = ls())
cat("\n--- Main Table (Full Controls) ---\n")
source(here::here("code", "R code", "full controls.R"))
rm(list = ls())
cat("\n--- Main Table (Softwares) ---\n")
source(here::here("code", "R code", "softwares.R"))
rm(list = ls())
cat("\n--- Main Table (Error Shares) ---\n")
source(here::here("code", "R code", "error shares.R"))
rm(list = ls())
cat("\n--- Main Table (Study II Interaction) ---\n")
source(here::here("code", "R code", "study 2.R"))
rm(list = ls())
cat("\n--- Main Table (Power) ---\n")
source(here::here("code", "R code", "power.R"))
rm(list = ls())
# ---- 3. Group Differences Table ----
cat("\n--- Group Differences Table ---\n")
source(here::here("code", "R code", "branches.R"))
rm(list = ls())
# ---- 4. Balance Tables ----
cat("\n--- Balance Tables ---\n")
source(here::here("code", "R code", "balance.R"))
rm(list = ls())
# ---- 5. ChatGPT Skill Tables ----
cat("\n--- ChatGPT Skill Tables ---\n")
source(here::here("code", "R code", "gpt skill.R"))
rm(list = ls())
# ---- 6. Prompts Usage Tables ----
cat("\n--- Prompts Usage Tables ---\n")
source(here::here("code", "R code", "prompts.R"))
# ---- 6. Prompts Usage Tables ----
cat("\n--- Prompts Usage Tables ---\n")
source(here::here("code", "R code", "prompts.R"))
rm(list = ls())
# ---- 7. RMST Tables ----
cat("\n--- RMST Tables ---\n")
source(here::here("code", "R code", "rmst.R"))
rm(list = ls())
# ---- 8. Figures ----
cat("\n--- Figure: Time to First Cumulative Density ---\n")
source(here::here("code", "R code", "time to first.R"))
rm(list = ls())
cat("\n--- Figure: Reproduction Rates Over Time ---\n")
source(here::here("code", "R code", "reproduction rates.R"))
rm(list = ls())
cat("\n--- Figure: Prompt Distribution ---\n")
source(here::here("code", "R code", "prompt distribution.R"))
rm(list = ls())
# ---- Finish logging ----
cat("\n=== MASTER LOG END ===\n")
sink()
# ===========================================
# Master R Script for AI Paper Replication
# File location (relative to project root):
#   code/R code/master.R
# ===========================================
# ---- Declare project root ----
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
here::i_am("code/R code/master.R")
# ---- Load required packages ----
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pkgs <- c(
"haven", "rmarkdown", "readxl",
"dplyr", "stringr", "tidyr", "forcats", "janitor", "lubridate",
"fixest", "purrr", "broom", "tibble", "car", "margins",
"sandwich", "lmtest", "multcomp", "kableExtra",
"ggplot2", "patchwork", "modelsummary",
"ggsurvfit", "survRM2", "xtable"
)
pacman::p_load(char = pkgs, install = TRUE, character.only = TRUE)
# ---- Start logging ----
log_file <- here::here("output", "master_log_R.log")
sink(log_file, split = TRUE)
cat("=== MASTER LOG START ===\n")
# ---- 1. Cleaning raw data ----
cat("\n--- Cleaning raw data ---\n")
source(here::here("code", "R code", "cleaning.R"))
rm(list = ls())
# ---- 2. Main Tables (regression outputs) ----
cat("\n--- Main Table (OLS) ---\n")
source(here::here("code", "R code", "main.R"))
rm(list = ls())
cat("\n--- Main Table (Logit and Poisson) ---\n")
source(here::here("code", "R code", "logit poisson.R"))
rm(list = ls())
cat("\n--- Main Table (Full Controls) ---\n")
source(here::here("code", "R code", "full controls.R"))
rm(list = ls())
cat("\n--- Main Table (Softwares) ---\n")
source(here::here("code", "R code", "softwares.R"))
rm(list = ls())
cat("\n--- Main Table (Error Shares) ---\n")
source(here::here("code", "R code", "error shares.R"))
rm(list = ls())
cat("\n--- Main Table (Study II Interaction) ---\n")
source(here::here("code", "R code", "study 2.R"))
# ===========================================
# Master R Script for AI Paper Replication
# File location (relative to project root):
#   code/R code/master.R
# ===========================================
# ---- Declare project root ----
if (!requireNamespace("here", quietly = TRUE)) install.packages("here")
here::i_am("code/R code/master.R")
# ---- Load required packages ----
if (!requireNamespace("pacman", quietly = TRUE)) install.packages("pacman")
pkgs <- c(
"haven", "rmarkdown", "readxl",
"dplyr", "stringr", "tidyr", "forcats", "janitor", "lubridate",
"fixest", "purrr", "broom", "tibble", "car", "margins",
"sandwich", "lmtest", "multcomp", "kableExtra",
"ggplot2", "patchwork", "modelsummary",
"ggsurvfit", "survRM2", "xtable", "glue"
)
pacman::p_load(char = pkgs, install = TRUE, character.only = TRUE)
# ---- Start logging ----
log_file <- here::here("output", "master_log_R.log")
sink(log_file, split = TRUE)
cat("=== MASTER LOG START ===\n")
# ---- 1. Cleaning raw data ----
cat("\n--- Cleaning raw data ---\n")
source(here::here("code", "R code", "cleaning.R"))
rm(list = ls())
# ---- 2. Main Tables (regression outputs) ----
cat("\n--- Main Table (OLS) ---\n")
source(here::here("code", "R code", "main.R"))
rm(list = ls())
cat("\n--- Main Table (Logit and Poisson) ---\n")
source(here::here("code", "R code", "logit poisson.R"))
rm(list = ls())
cat("\n--- Main Table (Full Controls) ---\n")
source(here::here("code", "R code", "full controls.R"))
rm(list = ls())
cat("\n--- Main Table (Softwares) ---\n")
source(here::here("code", "R code", "softwares.R"))
rm(list = ls())
cat("\n--- Main Table (Error Shares) ---\n")
source(here::here("code", "R code", "error shares.R"))
rm(list = ls())
cat("\n--- Main Table (Study II Interaction) ---\n")
source(here::here("code", "R code", "study 2.R"))
rm(list = ls())
cat("\n--- Main Table (Power) ---\n")
source(here::here("code", "R code", "power.R"))
rm(list = ls())
# ---- 3. Group Differences Table ----
cat("\n--- Group Differences Table ---\n")
source(here::here("code", "R code", "branches.R"))
rm(list = ls())
# ---- 4. Balance Tables ----
cat("\n--- Balance Tables ---\n")
source(here::here("code", "R code", "balance.R"))
rm(list = ls())
# ---- 5. ChatGPT Skill Tables ----
cat("\n--- ChatGPT Skill Tables ---\n")
source(here::here("code", "R code", "gpt skill.R"))
rm(list = ls())
# ---- 6. Prompts Usage Tables ----
cat("\n--- Prompts Usage Tables ---\n")
source(here::here("code", "R code", "prompts.R"))
rm(list = ls())
# ---- 7. RMST Tables ----
cat("\n--- RMST Tables ---\n")
source(here::here("code", "R code", "rmst.R"))
rm(list = ls())
# ---- 8. Figures ----
cat("\n--- Figure: Time to First Cumulative Density ---\n")
source(here::here("code", "R code", "time to first.R"))
rm(list = ls())
cat("\n--- Figure: Reproduction Rates Over Time ---\n")
source(here::here("code", "R code", "reproduction rates.R"))
rm(list = ls())
cat("\n--- Figure: Prompt Distribution ---\n")
source(here::here("code", "R code", "prompt distribution.R"))
rm(list = ls())
# ---- Finish logging ----
cat("\n=== MASTER LOG END ===\n")
sink()
# ---- 1. Read data -----------------------------------------------------------
main <- readRDS("data/AI games.rds")
View(main)
