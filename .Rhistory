)
extras <- c("Controls"                       = "\\checkmark",
"Mean of dep. var"               = sprintf("%.3f", ymean),
"p-val (AI-Assisted vs. AI-Led)" = sprintf("%.3f", pval),
"Observations"                   = nobs(fit))
attr(fit, "add_lines") <- extras   # stash for modelsummary
fit
}
# dependent variables (order mirrors Stata script)
depvars <- c("reproduction", "minor_errors", "major_errors",
"one_good_robustness", "two_good_robustness",
"ran_one_robustness",  "ran_two_robustness")
# nice column titles
coltitles <- c("Reproduction", "Minor errors", "Major errors",
"One good robustness", "Two good robustness",
"Ran one robustness", "Ran two robustness")
# ─────────────────────
# 3.  Run regressions
# ─────────────────────
mods_A <- lapply(depvars, run_model, data = filter(dat, game != 9))
mods_B <- lapply(depvars, run_model, data = dat)
names(mods_A) <- names(mods_B) <- coltitles
# function to pull the custom rows we stored in each model
extract_rows <- function(modlist) {
lines <- lapply(modlist, attr, which = "add_lines")
data.frame(term = names(lines[[1]]),
do.call(cbind, lines),
check.names = FALSE)
}
rows_A <- extract_rows(mods_A)
rows_B <- extract_rows(mods_B)
# ─────────────────────
# 4.  Export LaTeX
# ─────────────────────
dir.create("output/tables", recursive = TRUE, showWarnings = FALSE)
common_opts <- list(
stars       = TRUE,
statistic   = c("({std.error})", "[{conf.low}; {conf.high}]"),
coef_omit   = "Intercept|number_teammates",  # hide these rows
fmt         = 3,
gof_omit    = "R2|Adj|AIC|BIC|Log.Lik|[Rr]esid",
escape      = FALSE
)
# Panel A – replace file
modelsummary(
mods_A,
add_rows   = rows_A,
title      = "Panel A: Excluding game 9",
notes      = c("Standard errors in parentheses; confidence intervals in brackets.",
"Human-only branch (1) omitted.",
"Controls include number of teammates; game–software, skill, and attendance fixed effects.",
"$^{*}p<0.10$; $^{**}p<0.05$; $^{***}p<0.01$."),
output     = "output/tables/main_reg_panels_R.tex",
!!!common_opts
)
View(mods_A)
View(rows_A)
View(rows_A)
View(rows_B)
View(rows_A)
View(rows_B)
################################################################################
#  Replication-Games regressions (R version)                                   #
#  – Panel A: sample restricted to game != 9                                   #
#  – Panel B: full sample                                                      #
#  Output:  output/tables/main_reg_panels_R.tex                                #
################################################################################
# ─────────────────────
# 0.  Packages
# ─────────────────────
required <- c("haven",        # read .dta
"fixest",       # HD-FE regressions
"modelsummary", # LaTeX tables
"dplyr")
invisible(lapply(required, function(p) {
if (!requireNamespace(p, quietly = TRUE)) install.packages(p)
library(p, character.only = TRUE)
}))
# ─────────────────────
# 1.  Load data
# ─────────────────────
dat <- read_dta("~/Dropbox/I4R/AI paper/data/AI games.dta") |>
mutate(branch = factor(branch))            # reference level = 1
# ─────────────────────
# 2.  Helper to run one model
# ─────────────────────
run_model <- function(dep, data) {
fml <- as.formula(
paste0(dep,
" ~ i(branch, ref = 1) + number_teammates | ",
"game:software + max_skill + min_skill + ",
"min_gpt + max_gpt + attendance")
)
fit <- feols(fml, data = data, vcov = "HC1")
# extra summary rows ---------------------------------------------------------
ymean <- mean(data[[dep]], na.rm = TRUE)
pval  <- unname( as.numeric( wald(fit, "branch::2 - branch::3 = 0") ) )
extras <- c("Controls"                       = "\\checkmark",
"Mean of dep. var"               = sprintf("%.3f", ymean),
"p-val (AI-Assisted vs. AI-Led)" = sprintf("%.3f", pval),
"Observations"                   = nobs(fit))
attr(fit, "add_lines") <- extras
fit
}
# dependent variables (order mirrors Stata script)
depvars <- c("reproduction", "minor_errors", "major_errors",
"one_good_robustness", "two_good_robustness",
"ran_one_robustness",  "ran_two_robustness")
# column titles
coltitles <- c("Reproduction", "Minor errors", "Major errors",
"One good robustness", "Two good robustness",
"Ran one robustness", "Ran two robustness")
# ─────────────────────
# 3.  Run regressions
# ─────────────────────
mods_A <- lapply(depvars, run_model, data = filter(dat, game != 9))
mods_B <- lapply(depvars, run_model, data = dat)
names(mods_A) <- names(mods_B) <- coltitles
# pull custom rows from each model
extract_rows <- function(modlist) {
lines <- lapply(modlist, attr, which = "add_lines")
data.frame(term = names(lines[[1]]),
do.call(cbind, lines),
check.names = FALSE)
}
rows_A <- extract_rows(mods_A)
rows_B <- extract_rows(mods_B)
# ─────────────────────
# 4.  Export LaTeX
# ─────────────────────
dir.create("output/tables", recursive = TRUE, showWarnings = FALSE)
common_opts <- list(
stars      = TRUE,
statistic  = c("({std.error})", "[{conf.low}; {conf.high}]"),
coef_omit  = "Intercept|number_teammates",
fmt        = 3,
gof_omit   = "R2|Adj|AIC|BIC|Log.Lik|[Rr]esid",
escape     = FALSE
)
## ---------- Panel A (replace file) ----------
args_A <- c(
list(
x        = mods_A,
add_rows = rows_A,
title    = "Panel A: Excluding game 9",
notes    = c("Standard errors in parentheses; confidence intervals in brackets.",
"Human-only branch (1) omitted.",
"Controls include number of teammates; game–software, skill, and attendance fixed effects.",
"$^{*}p<0.10$; $^{**}p<0.05$; $^{***}p<0.01$."),
output   = "output/tables/main_reg_panels_R.tex"
),
common_opts
)
do.call(modelsummary, args_A)
View(mods_A)
################################################################################
#  Replication-Games regressions (R version)                                   #
#  – Panel A: sample restricted to game != 9                                   #
#  – Panel B: full sample                                                      #
#  Output:  output/tables/main_reg_panels_R.tex                                #
################################################################################
# ─────────────────────
# 0.  Packages
# ─────────────────────
required <- c("haven",        # read .dta
"fixest",       # HD-FE regressions
"modelsummary", # LaTeX tables
"dplyr")
invisible(lapply(required, function(p) {
if (!requireNamespace(p, quietly = TRUE)) install.packages(p)
library(p, character.only = TRUE)
}))
# ─────────────────────
# 1.  Load data
# ─────────────────────
dat <- read_dta("~/Dropbox/I4R/AI paper/data/AI games.dta") |>
mutate(branch = factor(branch))          # reference level = 1
# ─────────────────────
# 2.  Helper to run one model
# ─────────────────────
run_model <- function(dep, data) {
fml <- as.formula(
paste0(dep,
" ~ i(branch, ref = 1) + number_teammates | ",
"game:software + max_skill + min_skill + ",
"min_gpt + max_gpt + attendance")
)
fit <- feols(fml, data = data, vcov = "HC1")
# extra summary rows ---------------------------------------------------------
ymean <- mean(data[[dep]], na.rm = TRUE)
pval  <- unname( as.numeric( wald(fit, "branch::2 - branch::3 = 0") ) )
extras <- c("Controls"                       = "\\checkmark",
"Mean of dep. var"               = sprintf("%.3f", ymean),
"p-val (AI-Assisted vs. AI-Led)" = sprintf("%.3f", pval),
"Observations"                   = nobs(fit))
attr(fit, "add_lines") <- extras
fit
}
# dependent variables (order mirrors Stata script)
depvars <- c("reproduction", "minor_errors", "major_errors",
"one_good_robustness", "two_good_robustness",
"ran_one_robustness",  "ran_two_robustness")
# column titles
coltitles <- c("Reproduction", "Minor errors", "Major errors",
"One good robustness", "Two good robustness",
"Ran one robustness", "Ran two robustness")
# ─────────────────────
# 3.  Run regressions
# ─────────────────────
mods_A <- lapply(depvars, run_model, data = filter(dat, game != 9))
mods_B <- lapply(depvars, run_model, data = dat)
names(mods_A) <- names(mods_B) <- coltitles
# pull custom rows from each model
extract_rows <- function(modlist) {
lines <- lapply(modlist, attr, which = "add_lines")
data.frame(term = names(lines[[1]]),
do.call(cbind, lines),
check.names = FALSE)
}
rows_A <- extract_rows(mods_A)
rows_B <- extract_rows(mods_B)
# ─────────────────────
# 4.  Export LaTeX
# ─────────────────────
dir.create("output/tables", recursive = TRUE, showWarnings = FALSE)
common_opts <- list(
stars      = TRUE,
statistic  = c("({std.error})", "[{conf.low}; {conf.high}]"),
coef_omit  = "Intercept|number_teammates",
fmt        = 3,
gof_omit   = "R2|Adj|AIC|BIC|Log.Lik|[Rr]esid",
escape     = FALSE
)
## ---------- Panel A (replace file) ----------
args_A <- c(
list(
models   = mods_A,
add_rows = rows_A,
title    = "Panel A: Excluding game 9",
notes    = c("Standard errors in parentheses; confidence intervals in brackets.",
"Human-only branch (1) omitted.",
"Controls include number of teammates; game–software, skill, and attendance fixed effects.",
"$^{*}p<0.10$; $^{**}p<0.05$; $^{***}p<0.01$."),
output   = "output/tables/main_reg_panels_R.tex"
),
common_opts
)
do.call(modelsummary, args_A)
## ---------- Panel B (append) ----------
args_B <- c(
list(
models   = mods_B,
add_rows = rows_B,
title    = "Panel B: Full sample",
notes    = NULL,        # keep footer only once
output   = "output/tables/main_reg_panels_R.tex",
append   = TRUE
),
common_opts
)
do.call(modelsummary, args_B)
################################################################################
#  End                                                                          #
################################################################################
################################################################################
#  Replication-Games regressions (R version)                                   #
#  – Panel A: sample restricted to game ≠ 9                                    #
#  – Panel B: full sample                                                      #
#  Output:  output/tables/main_reg_panels_R.tex                                #
################################################################################
# ─────────────────────
# 0.  Packages & global options
# ─────────────────────
required <- c("haven", "fixest", "modelsummary", "dplyr", "kableExtra")
invisible(lapply(required, function(p) {
if (!requireNamespace(p, quietly = TRUE)) install.packages(p)
library(p, character.only = TRUE)
}))
## Tell modelsummary to build classic booktabs tables via {kableExtra}
options(modelsummary_factory_default       = "kable",
modelsummary_format_numeric_latex  = "plain")   # no \num{}
# ─────────────────────
# 1.  Load data
# ─────────────────────
dat <- read_dta("~/Dropbox/I4R/AI paper/data/AI games.dta") |>
mutate(branch = factor(branch))          # reference level = 1
# ─────────────────────
# 2.  Helper to run one model
# ─────────────────────
run_model <- function(dep, data) {
fml <- as.formula(
paste0(dep,
" ~ i(branch, ref = 1) + number_teammates | ",
"game:software + max_skill + min_skill + ",
"min_gpt + max_gpt + attendance")
)
fit <- feols(fml, data = data, vcov = "HC1")
# extra summary rows ---------------------------------------------------------
ymean <- mean(data[[dep]], na.rm = TRUE)
pval  <- unname( as.numeric( wald(fit, "branch::2 - branch::3 = 0") ) )
extras <- c("Controls"                       = "\\checkmark",
"Mean of dep. var"               = sprintf("%.3f", ymean),
"p-val (AI-Assisted vs. AI-Led)" = sprintf("%.3f", pval),
"Observations"                   = nobs(fit))
attr(fit, "add_lines") <- extras
fit
}
# dependent variables (order mirrors Stata script)
depvars <- c("reproduction", "minor_errors", "major_errors",
"one_good_robustness", "two_good_robustness",
"ran_one_robustness",  "ran_two_robustness")
# column titles
coltitles <- c("Reproduction", "Minor errors", "Major errors",
"One good robustness", "Two good robustness",
"Ran one robustness", "Ran two robustness")
# ─────────────────────
# 3.  Run regressions
# ─────────────────────
mods_A <- lapply(depvars, run_model, data = filter(dat, game != 9))
mods_B <- lapply(depvars, run_model, data = dat)
names(mods_A) <- names(mods_B) <- coltitles
# pull custom rows from each model
extract_rows <- function(modlist) {
lines <- lapply(modlist, attr, which = "add_lines")
data.frame(term = names(lines[[1]]),
do.call(cbind, lines),
check.names = FALSE)
}
rows_A <- extract_rows(mods_A)
rows_B <- extract_rows(mods_B)
# ─────────────────────
# 4.  Export LaTeX
# ─────────────────────
dir.create("output/tables", recursive = TRUE, showWarnings = FALSE)
common_opts <- list(
stars      = TRUE,
statistic  = c("({std.error})", "[{conf.low}; {conf.high}]"),
coef_omit  = "Intercept|number_teammates",
fmt        = 3,
gof_omit   = "R2|Adj|AIC|BIC|Log.Lik|[Rr]esid",
escape     = FALSE
)
## ---------- Panel A (replace file) ----------
args_A <- c(
list(
models   = mods_A,
add_rows = rows_A,
title    = "Panel A: Excluding game 9",
notes    = c("Standard errors in parentheses; confidence intervals in brackets.",
"Human-only branch (1) omitted.",
"Controls include number of teammates; game–software, skill, and attendance fixed effects.",
"$^{*}p<0.10$; $^{**}p<0.05$; $^{***}p<0.01$."),
output   = "output/tables/main_reg_panels_R.tex",
booktabs = TRUE                        # ensure \\toprule etc.
),
common_opts
)
do.call(modelsummary, args_A)
################################################################################
#  Replication-Games regressions (R version)                                   #
#  – Panel A: sample restricted to game ≠ 9                                    #
#  – Panel B: full sample                                                      #
#  Output:  output/tables/main_reg_panels_R.tex                                #
################################################################################
# ─────────────────────
# 0.  Packages & global options
# ─────────────────────
required <- c("haven", "fixest", "modelsummary", "dplyr", "kableExtra")
invisible(lapply(required, function(p) {
if (!requireNamespace(p, quietly = TRUE)) install.packages(p)
library(p, character.only = TRUE)
}))
## Tell modelsummary to use classic booktabs tables via {kableExtra}
options(
modelsummary_factory_default      = "kableExtra",   # <- valid factory name
modelsummary_format_numeric_latex = "plain"         # plain numbers, no \num{}
)
# ─────────────────────
# 1.  Load data
# ─────────────────────
dat <- read_dta("~/Dropbox/I4R/AI paper/data/AI games.dta") |>
mutate(branch = factor(branch))            # reference level = 1
# ─────────────────────
# 2.  Helper to run one model
# ─────────────────────
run_model <- function(dep, data) {
fml <- as.formula(
paste0(dep,
" ~ i(branch, ref = 1) + number_teammates | ",
"game:software + max_skill + min_skill + ",
"min_gpt + max_gpt + attendance")
)
fit <- feols(fml, data = data, vcov = "HC1")
# extra summary rows ---------------------------------------------------------
ymean <- mean(data[[dep]], na.rm = TRUE)
pval  <- unname( as.numeric( wald(fit, "branch::2 - branch::3 = 0") ) )
extras <- c("Controls"                       = "\\checkmark",
"Mean of dep. var"               = sprintf("%.3f", ymean),
"p-val (AI-Assisted vs. AI-Led)" = sprintf("%.3f", pval),
"Observations"                   = nobs(fit))
attr(fit, "add_lines") <- extras
fit
}
# dependent variables (order mirrors Stata script)
depvars <- c("reproduction", "minor_errors", "major_errors",
"one_good_robustness", "two_good_robustness",
"ran_one_robustness",  "ran_two_robustness")
# column titles
coltitles <- c("Reproduction", "Minor errors", "Major errors",
"One good robustness", "Two good robustness",
"Ran one robustness", "Ran two robustness")
# ─────────────────────
# 3.  Run regressions
# ─────────────────────
mods_A <- lapply(depvars, run_model, data = filter(dat, game != 9))
mods_B <- lapply(depvars, run_model, data = dat)
names(mods_A) <- names(mods_B) <- coltitles
# pull custom rows from each model
extract_rows <- function(modlist) {
lines <- lapply(modlist, attr, which = "add_lines")
data.frame(term = names(lines[[1]]),
do.call(cbind, lines),
check.names = FALSE)
}
rows_A <- extract_rows(mods_A)
rows_B <- extract_rows(mods_B)
# ─────────────────────
# 4.  Export LaTeX
# ─────────────────────
dir.create("output/tables", recursive = TRUE, showWarnings = FALSE)
common_opts <- list(
stars      = TRUE,
statistic  = c("({std.error})", "[{conf.low}; {conf.high}]"),
coef_omit  = "Intercept|number_teammates",
fmt        = 3,
gof_omit   = "R2|Adj|AIC|BIC|Log.Lik|[Rr]esid",
escape     = FALSE,
booktabs   = TRUE                        # ensures \toprule etc.
)
## ---------- Panel A (replace file) ----------
args_A <- c(
list(
models   = mods_A,
add_rows = rows_A,
title    = "Panel A: Excluding game 9",
notes    = c("Standard errors in parentheses; confidence intervals in brackets.",
"Human-only branch (1) omitted.",
"Controls include number of teammates; game–software, skill, and attendance fixed effects.",
"$^{*}p<0.10$; $^{**}p<0.05$; $^{***}p<0.01$."),
output   = "output/tables/main_reg_panels_R.tex"
),
common_opts
)
do.call(modelsummary, args_A)
## ---------- Panel B (append) ----------
args_B <- c(
list(
models   = mods_B,
add_rows = rows_B,
title    = "Panel B: Full sample",
notes    = NULL,                       # footer appears only once
output   = "output/tables/main_reg_panels_R.tex",
append   = TRUE
),
common_opts
)
do.call(modelsummary, args_B)
################################################################################
#  End                                                                          #
################################################################################
# ------------------------------------------------------------
# 1) Cambiar al directorio de tu proyecto
# ------------------------------------------------------------
project_path <- "/Users/jposada/Library/CloudStorage/Dropbox/I4R/AI paper"
setwd(project_path)
# ------------------------------------------------------------
# 2) Inicializar un repositorio Git local
# ------------------------------------------------------------
system("git init")
# ------------------------------------------------------------
# 3) (Opcional) Crear un README.md si no existe
# ------------------------------------------------------------
if (!file.exists("README.md")) {
cat("# AI-Games\n\nRepositorio para el proyecto AI paper.", file = "README.md")
}
# ------------------------------------------------------------
# 4) Añadir todos los archivos al área de staging
# ------------------------------------------------------------
system("git add .")
# ------------------------------------------------------------
# 5) Hacer el primer commit
# ------------------------------------------------------------
system('git commit -m "Initial commit: añadir proyecto existente"')
# ------------------------------------------------------------
# 6) Asegurarse de que la rama principal se llame "main"
# ------------------------------------------------------------
system("git branch -M main")
# ------------------------------------------------------------
# 7) Establecer el remoto "origin" apuntando a GitHub (SSH)
#    Como ya tienes tu llave SSH configurada, bastará con:
# ------------------------------------------------------------
system("git remote add origin git@github.com:juposada93/AI-Games.git")
# ------------------------------------------------------------
# 8) Empujar (push) el commit a GitHub
# ------------------------------------------------------------
system("git push -u origin main")
# ------------------------------------------------------------
# Fin: ahora tu carpeta local está ligada al repo de GitHub
# ------------------------------------------------------------
message("✅ El repositorio se creó y se subió a GitHub correctamente.")
# Reproducibility, Coding-Error Detection & Robustness
### Comparing the Performance of Humans, Cyborgs & (Lightly‑Supervised) Machines
